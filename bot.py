import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
from database import Database
from utils import generate_captcha, generate_crypto_address, generate_qr_code, format_deal_status, format_role, validate_amount, validate_password
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CAPTCHA, WAITING_AMOUNT, WAITING_CONDITIONS, WAITING_PASSWORD, WAITING_JOIN_PASSWORD = range(5)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

class GarantBot:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.bot_username = None
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user(user_id, user.username, user.first_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ
        if context.args:
            return await self.handle_deal_join(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        if db.is_user_verified(user_id):
            return await self.show_main_menu(update, context)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ø—á—É
        captcha_code = generate_captcha()
        db.save_captcha(user_id, captcha_code)
        
        message = f"""üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤–≤–µ–¥–∏ –ø—Ä–æ—Å—Ç—É—é –∫–∞–ø—á—É:
–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ: üîë

–ö–æ–¥: {captcha_code}"""
        
        await update.message.reply_text(message)
        return CAPTCHA
    
    async def handle_captcha(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ø—á–∏"""
        user_id = update.effective_user.id
        captcha_input = update.message.text
        
        if db.verify_captcha(user_id, captcha_input):
            db.verify_user(user_id)
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–∞–ø—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return CAPTCHA
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        message = """üéÑ OZER GARANT BOT üéÑ
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –û–∑–µ—Ä–∞
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

üíö –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –∫—Ä–∏–ø—Ç–æ-–≥–∞—Ä–∞–Ω—Ç üíö
‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ

üîπ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚îú‚îÄ üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É
‚îú‚îÄ ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–¥–µ–ª–∫–µ
‚îú‚îÄ üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
‚îî‚îÄ üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

üí∏ –ö–æ–º–∏—Å—Å–∏—è: 1.0$
üïí –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"""
        
        keyboard = [
            [KeyboardButton("üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")],
            [KeyboardButton("üìä –ú–æ–∏ —Å–¥–µ–ª–∫–∏"), KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        if update.message:
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(message)
            await update.callback_query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    
    async def handle_deal_join(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É"""
        try:
            # –§–æ—Ä–º–∞—Ç: deal_ID_USERID
            deal_data = context.args[0].split('_')
            if len(deal_data) >= 2 and deal_data[0] == 'deal':
                deal_id = int(deal_data[1])
                context.user_data['joining_deal_id'] = deal_id
                
                deal = db.get_deal(deal_id)
                if not deal:
                    await update.message.reply_text("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return ConversationHandler.END
                
                await update.message.reply_text(f"üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ #{deal_id}:")
                return WAITING_JOIN_PASSWORD
        except (ValueError, IndexError):
            pass
        
        return await self.start(update, context)
    
    async def handle_join_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ"""
        user_id = update.effective_user.id
        password = update.message.text
        deal_id = context.user_data.get('joining_deal_id')
        
        if db.join_deal(deal_id, user_id, password):
            deal = db.get_deal(deal_id)
            await update.message.reply_text("‚úÖ –ü–∞—Ä—Ç–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ!\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–¥–µ–ª–∫–∏
            creator_id = deal['seller_id'] if deal['seller_id'] != user_id else deal['buyer_id']
            if creator_id:
                try:
                    await context.bot.send_message(
                        creator_id,
                        f"‚úÖ –ö –≤–∞—à–µ–π —Å–¥–µ–ª–∫–µ #{deal_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä!"
                    )
                except:
                    pass
            
            await self.show_deal_payment_info(update, context, deal_id)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Å–¥–µ–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        
        return ConversationHandler.END
    
    async def create_deal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞–≤–µ—Ü", callback_data="role_seller")],
            [InlineKeyboardButton("üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å", callback_data="role_buyer")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text("üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ —Å–¥–µ–ª–∫–µ:", reply_markup=reply_markup)
    
    async def handle_role_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        role = query.data.split('_')[1]
        context.user_data['deal_role'] = role
        
        await query.edit_message_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ USD:")
        return WAITING_AMOUNT
    
    async def handle_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
        amount_str = update.message.text
        amount, error = validate_amount(amount_str)
        
        if error:
            await update.message.reply_text(f"‚ùå {error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return WAITING_AMOUNT
        
        context.user_data['deal_amount'] = amount
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏:")
        return WAITING_CONDITIONS
    
    async def handle_conditions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —É—Å–ª–æ–≤–∏–π —Å–¥–µ–ª–∫–∏"""
        conditions = update.message.text
        
        if len(conditions) < 5:
            await update.message.reply_text("‚ùå –£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
            return WAITING_CONDITIONS
        
        context.user_data['deal_conditions'] = conditions
        await update.message.reply_text("üîê –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–¥–µ–ª–∫–∏ (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞):")
        return WAITING_PASSWORD
    
    async def handle_deal_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è —Å–¥–µ–ª–∫–∏"""
        password = update.message.text
        is_valid, error = validate_password(password)
        
        if not is_valid:
            await update.message.reply_text(f"‚ùå {error}")
            return WAITING_PASSWORD
        
        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
        user_id = update.effective_user.id
        role = context.user_data['deal_role']
        amount = context.user_data['deal_amount']
        conditions = context.user_data['deal_conditions']
        
        deal_id = db.create_deal(user_id, amount, conditions, password, role)
        
        if deal_id:
            commission = float(os.getenv('COMMISSION_RATE', 1.0))
            total_amount = amount + commission
            
            role_text = "–ü—Ä–æ–¥–∞–≤–µ—Ü" if role == "seller" else "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
            
            message = f"""‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}
üí∞ –°—É–º–º–∞: {amount}$
üìù –£—Å–ª–æ–≤–∏—è: {conditions}
üë§ –í–∞—à–∞ —Ä–æ–ª—å: {role_text}
üîê –ü–∞—Ä–æ–ª—å: {password}

‚ùå –û—Ç–º–µ–Ω–∞: –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É."""
            
            await update.message.reply_text(message)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            bot_username = context.bot.username
            join_link = f"https://t.me/{bot_username}?start=deal_{deal_id}_{user_id}"
            
            link_message = f"""üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ:
{join_link}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
            
            await update.message.reply_text(link_message)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        return ConversationHandler.END
    
    async def show_deal_payment_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, deal_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ —Å–¥–µ–ª–∫–∏"""
        deal = db.get_deal(deal_id)
        if not deal:
            return
        
        commission = float(os.getenv('COMMISSION_RATE', 1.0))
        total_amount = deal['amount'] + commission
        
        message = f"""üü¢ –î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id}!

üíµ –°—É–º–º–∞: {total_amount}$ (USDT)

üìù –£—Å–ª–æ–≤–∏—è: {deal['conditions']}

üí≥ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.

‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã..."""
        
        keyboard = [
            [InlineKeyboardButton("TRC20 USDT", callback_data=f"payment_TRC20_{deal_id}")],
            [InlineKeyboardButton("BTC", callback_data=f"payment_BTC_{deal_id}")],
            [InlineKeyboardButton("BNB", callback_data=f"payment_BNB_{deal_id}")],
            [InlineKeyboardButton("TRON", callback_data=f"payment_TRON_{deal_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
    
    async def handle_payment_method(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        data_parts = query.data.split('_')
        payment_method = data_parts[1]
        deal_id = int(data_parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
        address = generate_crypto_address(payment_method)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_deal_payment(deal_id, payment_method, address)
        
        deal = db.get_deal(deal_id)
        commission = float(os.getenv('COMMISSION_RATE', 1.0))
        total_amount = deal['amount'] + commission
        
        message = f"""üì¶ –°–¥–µ–ª–∫–∞ #{deal_id}

üí∞ –°—É–º–º–∞: {total_amount}$
üîó –°–µ—Ç—å: {payment_method}
üè∑ –ê–¥—Ä–µ—Å: {address}

üëá –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
        qr_data = address
        qr_image = generate_qr_code(qr_data)
        
        if qr_image:
            await query.edit_message_text(message)
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=qr_image,
                caption=f"QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n–ê–¥—Ä–µ—Å: {address}"
            )
        else:
            await query.edit_message_text(message)
    
    async def show_user_deals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        deals = db.get_user_deals(user_id)
        
        if not deals:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.")
            return
        
        message = "üìä –í–∞—à–∏ —Å–¥–µ–ª–∫–∏:\n\n"
        
        for deal in deals[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
            role = format_role(deal['id'], user_id, deal['seller_id'], deal['buyer_id'])
            status = format_deal_status(deal['status'])
            
            message += f"""üÜî –°–¥–µ–ª–∫–∞ #{deal['id']}
üí∞ –°—É–º–º–∞: {deal['amount']}$
üë§ –†–æ–ª—å: {role}
üìä –°—Ç–∞—Ç—É—Å: {status}
üìÖ –î–∞—Ç–∞: {deal['created_at'].strftime('%d.%m.%Y %H:%M')}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""
        
        await update.message.reply_text(message)
    
    async def show_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        user_deals = db.get_user_deals(user.id)
        
        completed_deals = len([d for d in user_deals if d['status'] == 'completed'])
        active_deals = len([d for d in user_deals if d['status'] in ['waiting_partner', 'waiting_payment', 'payment_sent']])
        
        message = f"""üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

üÜî ID: {user.id}
üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìù Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {completed_deals}
üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {active_deals}
üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(user_deals)}

üõ°Ô∏è –°—Ç–∞—Ç—É—Å: –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω ‚úÖ"""
        
        await update.message.reply_text(message)
    
    async def show_support(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
        message = """üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ OZER GARANT BOT

üïí –†–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ
üìû –û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç

üìß –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:
‚Ä¢ Telegram: @support_ozer
‚Ä¢ Email: support@ozer.com

‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
‚Ä¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É?
‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–∞—Ä–∞–Ω—Ç?
‚Ä¢ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —Å–¥–µ–ª–∫–∞?

üõ°Ô∏è –í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!"""
        
        await update.message.reply_text(message)
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == "üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É":
            await self.create_deal(update, context)
        elif text == "üìä –ú–æ–∏ —Å–¥–µ–ª–∫–∏":
            await self.show_user_deals(update, context)
        elif text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
            await self.show_profile(update, context)
        elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            await self.show_support(update, context)
        else:
            await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await self.show_main_menu(update, context)
        return ConversationHandler.END
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not db.connect():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        if not db.create_tables():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = Application.builder().token(self.bot_token).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        deal_conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.handle_role_selection, pattern="^role_"),
            ],
            states={
                WAITING_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_amount)],
                WAITING_CONDITIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_conditions)],
                WAITING_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_deal_password)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)]
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ø—á–∏ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ
        main_conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                CAPTCHA: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_captcha)],
                WAITING_JOIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_join_password)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)]
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(main_conv_handler)
        app.add_handler(deal_conv_handler)
        app.add_handler(CallbackQueryHandler(self.handle_payment_method, pattern="^payment_"))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        app.run_polling()

if __name__ == '__main__':
    bot = GarantBot()
    bot.run()