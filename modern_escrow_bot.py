import asyncio
import logging
import random
import qrcode
import io
import base64
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
import uuid

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database_manager import DatabaseManager
from config import BOT_TOKEN, MYSQL_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CaptchaStates(StatesGroup):
    waiting_captcha = State()

class DealStates(StatesGroup):
    waiting_amount = State()
    waiting_condition = State()
    waiting_password = State()

class JoinDealStates(StatesGroup):
    waiting_password = State()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CAPTCHA_ANIMALS = ["üê±", "üê∂", "üê∫", "ü¶ä", "üêª", "üê®", "üêØ", "ü¶Å", "üê∏", "üêß"]
TRC20_ADDRESS = "TREBy39rXoWMTfuZcobHNR49EKfnXPbbdE"
TON_ADDRESS = "UQC337PVpq0748IOjdbQWJlVjDMIdkENC5iimBrexCikKyYo"

class ModernEscrowBot:
    def __init__(self):
        self.db = DatabaseManager()
        
    def generate_captcha_keyboard(self, correct_animal: str) -> InlineKeyboardMarkup:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ø—á–∏ —Å 6 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        animals = random.sample(CAPTCHA_ANIMALS, 5)
        if correct_animal not in animals:
            animals[random.randint(0, 4)] = correct_animal
        
        random.shuffle(animals)
        
        builder = InlineKeyboardBuilder()
        for i in range(0, len(animals), 3):
            row = animals[i:i+3]
            for animal in row:
                builder.button(
                    text=animal,
                    callback_data=f"captcha_{animal}_{correct_animal}"
                )
        builder.adjust(3, 2, 1)
        return builder.as_markup()

    def get_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å 4 –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        builder = InlineKeyboardBuilder()
        builder.button(text="üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")
        builder.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        builder.button(text="üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏", callback_data="my_deals")
        builder.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
        builder.adjust(2, 2)
        return builder.as_markup()

    def get_deal_cancel_keyboard(self, deal_id: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏"""
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"cancel_deal_{deal_id}")
        return builder.as_markup()

    def generate_qr_code(self, address: str, amount: float = None) -> BufferedInputFile:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR –∫–æ–¥ –¥–ª—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        qr_data = address
        if amount:
            qr_data = f"{address}?amount={amount}"
            
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(qr_data)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        bio = io.BytesIO()
        img.save(bio, 'PNG')
        bio.seek(0)
        
        return BufferedInputFile(bio.read(), filename=f"qr_{address[:10]}.png")

    async def send_payment_info(self, chat_id: int, amount: float):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å QR –∫–æ–¥–∞–º–∏"""
        # TRC20 USDT
        trc20_qr = self.generate_qr_code(TRC20_ADDRESS, amount)
        await bot.send_photo(
            chat_id=chat_id,
            photo=trc20_qr,
            caption=f"üí≥ <b>–û–ø–ª–∞—Ç–∞ TRC20 USDT</b>\n\n"
                   f"üí∞ –°—É–º–º–∞: <code>{amount}</code> USDT\n"
                   f"üè¶ –ê–¥—Ä–µ—Å: <code>{TRC20_ADDRESS}</code>\n\n"
                   f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å",
            parse_mode="HTML"
        )
        
        # TON
        ton_qr = self.generate_qr_code(TON_ADDRESS, amount)
        await bot.send_photo(
            chat_id=chat_id,
            photo=ton_qr,
            caption=f"üíé <b>–û–ø–ª–∞—Ç–∞ TON</b>\n\n"
                   f"üí∞ –°—É–º–º–∞: <code>{amount}</code> TON\n"
                   f"üè¶ –ê–¥—Ä–µ—Å: <code>{TON_ADDRESS}</code>\n\n"
                   f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å",
            parse_mode="HTML"
        )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
escrow_bot = ModernEscrowBot()

@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–∞–ø—á–µ–π"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await escrow_bot.db.is_user_registered(user_id):
        await message.answer(
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=escrow_bot.get_main_menu_keyboard(),
            parse_mode="HTML"
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—á—É
    correct_animal = random.choice(CAPTCHA_ANIMALS)
    await state.update_data(correct_animal=correct_animal)
    await state.set_state(CaptchaStates.waiting_captcha)
    
    await message.answer(
        f"ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Modern Escrow Bot!</b>\n\n"
        f"üîê –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: <b>{correct_animal}</b>",
        reply_markup=escrow_bot.generate_captcha_keyboard(correct_animal),
        parse_mode="HTML"
    )

@dp.callback_query(F.data.startswith("captcha_"))
async def handle_captcha(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏"""
    data = callback.data.split("_")
    selected_animal = data[1]
    correct_animal = data[2]
    
    if selected_animal == correct_animal:
        # –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        user_id = callback.from_user.id
        username = callback.from_user.username or "NoUsername"
        first_name = callback.from_user.first_name or "User"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await escrow_bot.db.register_user(user_id, username, first_name)
        await state.clear()
        
        await callback.message.edit_text(
            "‚úÖ <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Modern Escrow Bot 2025!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=escrow_bot.get_main_menu_keyboard(),
            parse_mode="HTML"
        )
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@dp.callback_query(F.data == "create_deal")
async def create_deal_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    active_deal = await escrow_bot.db.get_active_deal_by_creator(user_id)
    if active_deal:
        await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞!", show_alert=True)
        return
    
    await state.set_state(DealStates.waiting_amount)
    await callback.message.edit_text(
        "üí∞ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ USDT:",
        parse_mode="HTML"
    )

@dp.message(DealStates.waiting_amount)
async def process_deal_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏"""
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        await state.update_data(amount=amount)
        await state.set_state(DealStates.waiting_condition)
        
        await message.answer(
            f"üí∞ –°—É–º–º–∞: <b>{amount} USDT</b>\n\n"
            f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ —Å–¥–µ–ª–∫–∏:",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")

@dp.message(DealStates.waiting_condition)
async def process_deal_condition(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏"""
    condition = message.text.strip()
    if len(condition) < 10:
        await message.answer("‚ùå –£—Å–ª–æ–≤–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    
    await state.update_data(condition=condition)
    await state.set_state(DealStates.waiting_password)
    
    await message.answer(
        "üîê <b>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ:\n"
        "(–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)",
        parse_mode="HTML"
    )

@dp.message(DealStates.waiting_password)
async def process_deal_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
    password = message.text.strip()
    if len(password) < 4:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ú–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    data = await state.get_data()
    amount = data['amount']
    condition = data['condition']
    
    # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ –ë–î
    deal_id = str(uuid.uuid4())
    user_id = message.from_user.id
    
    success = await escrow_bot.db.create_deal(
        deal_id=deal_id,
        creator_id=user_id,
        amount=amount,
        condition=condition,
        password=password
    )
    
    if success:
        await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        bot_username = (await bot.get_me()).username
        join_link = f"https://t.me/{bot_username}?start=join_{deal_id}"
        
        await message.answer(
            "‚úÖ <b>–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"üÜî ID —Å–¥–µ–ª–∫–∏: <code>{deal_id}</code>\n"
            f"üí∞ –°—É–º–º–∞: <b>{amount} USDT</b>\n"
            f"üìù –£—Å–ª–æ–≤–∏–µ: {condition}\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b>\n"
            f"<code>{join_link}</code>\n\n"
            f"‚ö†Ô∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏",
            reply_markup=escrow_bot.get_deal_cancel_keyboard(deal_id),
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "profile")
async def show_profile(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await escrow_bot.db.is_user_in_active_deal(user_id):
        await callback.answer("‚ùå –ü–∞–Ω–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏!", show_alert=True)
        return
    
    user_stats = await escrow_bot.db.get_user_stats(user_id)
    
    await callback.message.edit_text(
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{user_id}</code>\n"
        f"üë§ –ò–º—è: {callback.from_user.first_name}\n"
        f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {user_stats['completed_deals']}\n"
        f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: {user_stats['total_volume']} USDT\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_stats['registration_date']}\n\n"
        f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]),
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "my_deals")
async def show_my_deals(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await escrow_bot.db.is_user_in_active_deal(user_id):
        await callback.answer("‚ùå –ü–∞–Ω–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏!", show_alert=True)
        return
    
    deals = await escrow_bot.db.get_user_deals(user_id)
    
    if not deals:
        text = "üìã <b>–í–∞—à–∏ —Å–¥–µ–ª–∫–∏</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫."
    else:
        text = "üìã <b>–í–∞—à–∏ —Å–¥–µ–ª–∫–∏</b>\n\n"
        for deal in deals:
            status_emoji = "üü¢" if deal['status'] == 'completed' else "üü°" if deal['status'] == 'active' else "üî¥"
            text += f"{status_emoji} {deal['amount']} USDT - {deal['status']}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]),
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "support")
async def show_support(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if await escrow_bot.db.is_user_in_active_deal(user_id):
        await callback.answer("‚ùå –ü–∞–Ω–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n"
        "‚Ä¢ Telegram: @support_admin\n"
        "‚Ä¢ Email: support@escrowbot.com\n\n"
        "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7\n"
        "‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 15 –º–∏–Ω—É—Ç",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]),
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üéâ <b>Modern Escrow Bot 2025</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=escrow_bot.get_main_menu_keyboard(),
        parse_mode="HTML"
    )

@dp.callback_query(F.data.startswith("cancel_deal_"))
async def cancel_deal(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏"""
    deal_id = callback.data.replace("cancel_deal_", "")
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–¥–µ–ª–∫–∏
    deal = await escrow_bot.db.get_deal(deal_id)
    if not deal or deal['creator_id'] != user_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å–¥–µ–ª–∫—É!", show_alert=True)
        return
    
    # –û—Ç–º–µ–Ω—è–µ–º —Å–¥–µ–ª–∫—É
    success = await escrow_bot.db.cancel_deal(deal_id)
    if success:
        await callback.message.edit_text(
            "‚úÖ <b>–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
            reply_markup=escrow_bot.get_main_menu_keyboard(),
            parse_mode="HTML"
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏!", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ
@dp.message(Command("start"))
async def handle_join_deal(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É"""
    if not message.text.startswith("/start join_"):
        return
    
    deal_id = message.text.replace("/start join_", "")
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    deal = await escrow_bot.db.get_deal(deal_id)
    if not deal:
        await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å
    if deal['creator_id'] == user_id:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–¥–µ–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if deal['status'] != 'active':
        await message.answer("‚ùå –≠—Ç–∞ —Å–¥–µ–ª–∫–∞ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    
    await state.update_data(deal_id=deal_id)
    await state.set_state(JoinDealStates.waiting_password)
    
    await message.answer(
        f"üîê <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–¥–µ–ª–∫–µ</b>\n\n"
        f"üí∞ –°—É–º–º–∞: {deal['amount']} USDT\n"
        f"üìù –£—Å–ª–æ–≤–∏–µ: {deal['condition']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:",
        parse_mode="HTML"
    )

@dp.message(JoinDealStates.waiting_password)
async def process_join_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    data = await state.get_data()
    deal_id = data['deal_id']
    password = message.text.strip()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    deal = await escrow_bot.db.get_deal(deal_id)
    if not deal or deal['password'] != password:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        return
    
    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ —Å–¥–µ–ª–∫–µ
    success = await escrow_bot.db.join_deal(deal_id, user_id)
    if success:
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø–ª–∞—Ç—ã
        await message.answer(
            f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–¥–µ–ª–∫–µ!</b>\n\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{deal['amount']} USDT</b>\n"
            f"üìù –£—Å–ª–æ–≤–∏–µ: {deal['condition']}\n\n"
            f"üí≥ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR –∫–æ–¥—ã –∏ –∞–¥—Ä–µ—Å–∞
        await escrow_bot.send_payment_info(message.chat.id, deal['amount'])
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
        await bot.send_message(
            deal['creator_id'],
            f"üîî <b>–ö –≤–∞—à–µ–π —Å–¥–µ–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å!</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {deal['amount']} USDT\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{message.from_user.username or 'NoUsername'}\n\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É...",
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ!")

@dp.message(Command("admin"))
async def admin_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    from config import NOTIFICATION_SETTINGS
    admin_id = NOTIFICATION_SETTINGS.get('admin_chat_id')
    
    if str(message.from_user.id) == str(admin_id):
        # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from admin_panel import AdminPanel
        admin_panel = AdminPanel(escrow_bot.db, bot)
        await admin_panel.send_admin_menu(message.chat.id)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
escrow_bot = ModernEscrowBot()

def register_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –≤—ã—à–µ
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    from admin_panel import AdminPanel, register_admin_handlers
    admin_panel = AdminPanel(escrow_bot.db, bot)
    register_admin_handlers(dp, admin_panel)
    
    logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    register_handlers()
    return escrow_bot, dp, bot