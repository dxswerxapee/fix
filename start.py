#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Modern Escrow Bot 2025 —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
"""

import asyncio
import sys
import os

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    return True

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env"""
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ README.md")
        return False
    
    from dotenv import load_dotenv
    load_dotenv()
    
    required_vars = ['BOT_TOKEN', 'MYSQL_HOST', 'MYSQL_USER', 'MYSQL_PASSWORD', 'MYSQL_DATABASE']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var) or os.getenv(var) == 'YOUR_BOT_TOKEN_HERE':
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import aiogram
        import aiomysql
        import qrcode
        import PIL
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r modern_requirements.txt")
        return False

async def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from test_connection import test_database
        return await test_database()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    
    print("üöÄ Modern Escrow Bot 2025 - –ó–∞–ø—É—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if not check_python_version():
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if not check_env_file():
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    if not await test_database():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!")
        choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø—É—Å–∫? (y/N): ")
        if choice.lower() != 'y':
            sys.exit(1)
    
    print("=" * 50)
    print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
    try:
        from run_bot import main as run_main
        await run_main()
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())