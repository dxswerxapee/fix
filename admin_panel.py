import asyncio
import logging
from typing import Dict, List
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

import database_manager
from config import BOT_TOKEN, NOTIFICATION_SETTINGS

logger = logging.getLogger(__name__)

class AdminPanel:
    def __init__(self, db: database_manager.DatabaseManager, bot: Bot):
        self.db = db
        self.bot = bot
        self.admin_chat_id = NOTIFICATION_SETTINGS.get('admin_chat_id')
        
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return str(user_id) == str(self.admin_chat_id)
    
    def get_admin_keyboard(self) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        builder.button(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        builder.button(text="üíº –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏", callback_data="admin_active_deals")
        builder.button(text="üìã –í—Å–µ —Å–¥–µ–ª–∫–∏", callback_data="admin_all_deals")
        builder.button(text="üí∞ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="admin_complete_deal")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data="admin_cancel_deal")
        builder.button(text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        builder.button(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_block_user")
        builder.adjust(2, 2, 2, 2)
        return builder.as_markup()
    
    async def send_admin_menu(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
        await self.bot.send_message(
            chat_id=chat_id,
            text="üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å Modern Escrow Bot 2025</b>\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.get_admin_keyboard(),
            parse_mode="HTML"
        )
    
    async def show_statistics(self, chat_id: int):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        stats = await self.db.get_admin_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        today_stats = await self._get_today_stats()
        
        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Modern Escrow Bot</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats.get('total_users', 0)}</b>\n"
            f"üíº –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: <b>{stats.get('active_deals', 0)}</b>\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: <b>{stats.get('completed_deals', 0)}</b>\n"
            f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: <b>{stats.get('total_volume', 0):.2f} USDT</b>\n\n"
            f"üìà <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
            f"üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{today_stats.get('new_users', 0)}</b>\n"
            f"üíº –ù–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫: <b>{today_stats.get('new_deals', 0)}</b>\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: <b>{today_stats.get('completed_today', 0)}</b>\n"
            f"üí∞ –û–±—ä–µ–º –∑–∞ –¥–µ–Ω—å: <b>{today_stats.get('volume_today', 0):.2f} USDT</b>"
        )
        
        back_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await self.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=back_button,
            parse_mode="HTML"
        )
    
    async def show_active_deals(self, chat_id: int):
        """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        try:
            async with self.db.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute("""
                        SELECT d.deal_id, d.creator_id, d.buyer_id, d.amount, 
                               d.status, d.created_at, u1.username as creator_username,
                               u2.username as buyer_username
                        FROM deals d
                        LEFT JOIN users u1 ON d.creator_id = u1.user_id
                        LEFT JOIN users u2 ON d.buyer_id = u2.user_id
                        WHERE d.status IN ('active', 'joined', 'paid')
                        ORDER BY d.created_at DESC
                        LIMIT 10
                    """)
                    deals = await cursor.fetchall()
            
            if not deals:
                text = "üíº <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫."
            else:
                text = "üíº <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏</b>\n\n"
                for deal in deals:
                    deal_id, creator_id, buyer_id, amount, status, created_at, creator_username, buyer_username = deal
                    status_emoji = {"active": "üü°", "joined": "üîµ", "paid": "üü†"}.get(status, "‚ùì")
                    
                    buyer_info = f"@{buyer_username}" if buyer_username else "–û–∂–∏–¥–∞–Ω–∏–µ"
                    
                    text += (
                        f"{status_emoji} <code>{deal_id[:8]}...</code>\n"
                        f"üí∞ {amount} USDT | üë§ @{creator_username} ‚Üí {buyer_info}\n"
                        f"üìÖ {created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    )
            
            back_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
            
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=back_button,
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {e}")
            await self.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö"
            )
    
    async def force_complete_deal(self, deal_id: str) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
            deal = await self.db.get_deal(deal_id)
            if not deal:
                return False
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–¥–µ–ª–∫—É
            success = await self.db.complete_deal(deal_id)
            
            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                await self._notify_deal_completion(deal)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await self.db._log_action(
                    self.admin_chat_id, 
                    deal_id, 
                    "admin_force_complete", 
                    f"Deal forcibly completed by admin"
                )
                
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ {deal_id}: {e}")
            return False
    
    async def force_cancel_deal(self, deal_id: str) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
            deal = await self.db.get_deal(deal_id)
            if not deal:
                return False
            
            # –û—Ç–º–µ–Ω—è–µ–º —Å–¥–µ–ª–∫—É
            success = await self.db.cancel_deal(deal_id)
            
            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                await self._notify_deal_cancellation(deal)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await self.db._log_action(
                    self.admin_chat_id, 
                    deal_id, 
                    "admin_force_cancel", 
                    f"Deal forcibly cancelled by admin"
                )
                
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ {deal_id}: {e}")
            return False
    
    async def broadcast_message(self, message_text: str) -> Dict[str, int]:
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            async with self.db.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute("SELECT user_id FROM users WHERE is_active = TRUE")
                    users = await cursor.fetchall()
            
            sent_count = 0
            failed_count = 0
            
            for user in users:
                try:
                    await self.bot.send_message(
                        chat_id=user[0],
                        text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n{message_text}",
                        parse_mode="HTML"
                    )
                    sent_count += 1
                    await asyncio.sleep(0.1)  # –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                except Exception:
                    failed_count += 1
            
            return {"sent": sent_count, "failed": failed_count}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return {"sent": 0, "failed": 0}
    
    async def block_user(self, user_id: int) -> bool:
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.db.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute(
                        "UPDATE users SET is_active = FALSE WHERE user_id = %s",
                        (user_id,)
                    )
                    
                    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await cursor.execute(
                        "UPDATE deals SET status = 'cancelled' WHERE (creator_id = %s OR buyer_id = %s) AND status IN ('active', 'joined', 'paid')",
                        (user_id, user_id)
                    )
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                    await self.db._log_action(
                        self.admin_chat_id, 
                        None, 
                        "admin_block_user", 
                        f"User {user_id} blocked by admin"
                    )
                    
                    return True
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def _get_today_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today = datetime.now().date()
            async with self.db.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    stats = {}
                    
                    # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    await cursor.execute(
                        "SELECT COUNT(*) FROM users WHERE DATE(registration_date) = %s",
                        (today,)
                    )
                    stats['new_users'] = (await cursor.fetchone())[0]
                    
                    # –ù–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    await cursor.execute(
                        "SELECT COUNT(*) FROM deals WHERE DATE(created_at) = %s",
                        (today,)
                    )
                    stats['new_deals'] = (await cursor.fetchone())[0]
                    
                    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    await cursor.execute(
                        "SELECT COUNT(*) FROM deals WHERE DATE(updated_at) = %s AND status = 'completed'",
                        (today,)
                    )
                    stats['completed_today'] = (await cursor.fetchone())[0]
                    
                    # –û–±—ä–µ–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    await cursor.execute(
                        "SELECT SUM(amount) FROM deals WHERE DATE(updated_at) = %s AND status = 'completed'",
                        (today,)
                    )
                    result = await cursor.fetchone()
                    stats['volume_today'] = float(result[0]) if result[0] else 0.0
                    
                    return stats
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
            return {}
    
    async def _notify_deal_completion(self, deal: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏"""
        try:
            completion_message = (
                f"‚úÖ <b>–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                f"üÜî ID: <code>{deal['deal_id']}</code>\n"
                f"üí∞ –°—É–º–º–∞: {deal['amount']} USDT\n"
                f"üìù –£—Å–ª–æ–≤–∏–µ: {deal['condition']}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
            await self.bot.send_message(
                chat_id=deal['creator_id'],
                text=completion_message,
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if deal['buyer_id']:
                await self.bot.send_message(
                    chat_id=deal['buyer_id'],
                    text=completion_message,
                    parse_mode="HTML"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
    
    async def _notify_deal_cancellation(self, deal: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏"""
        try:
            cancellation_message = (
                f"‚ùå <b>–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                f"üÜî ID: <code>{deal['deal_id']}</code>\n"
                f"üí∞ –°—É–º–º–∞: {deal['amount']} USDT\n"
                f"üìù –£—Å–ª–æ–≤–∏–µ: {deal['condition']}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
            await self.bot.send_message(
                chat_id=deal['creator_id'],
                text=cancellation_message,
                parse_mode="HTML"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if deal['buyer_id']:
                await self.bot.send_message(
                    chat_id=deal['buyer_id'],
                    text=cancellation_message,
                    parse_mode="HTML"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏: {e}")